From 17686e17a2105ec0d4c7d0688a15356c8b4fa523 Mon Sep 17 00:00:00 2001
From: Ujjwal <ujjwal2002tiwari@gmail.com>
Date: Tue, 30 May 2023 18:29:51 +0530
Subject: [PATCH] done task-2

---
 src/App.tsx   | 25 ++++++++++++++++++++-----
 src/Graph.tsx | 17 ++++++++++++++---
 2 files changed, 34 insertions(+), 8 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..44414ba 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph:boolean,  // added showgraph property
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,  //setting the showGraph to be false initially
     };
   }
 
@@ -29,19 +31,32 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){    // making graph update automatically
+      
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+      let x=0;
+      const interval =setInterval(() => {
+        DataStreamer.getData((serverResponds:ServerRespond[]) => {
+          this.setState({ 
+            data: serverResponds,
+            showGraph:true, 
+          });
+        });
+        x++;
+        if(x>1000){
+          clearInterval(interval);
+        }
+      },100);
+   }
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..61c0cff 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,8 +14,8 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+  load: (table: Table) => void, 
 }
 
 /**
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem= document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,17 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+                      {"stock":"distinct count",
+                      "top_ask_price":"avg",
+                      "top_bid_price":"avg",
+                      "timestamp":"distinct count"}`);
+
+
     }
   }
 
-- 
2.34.1

